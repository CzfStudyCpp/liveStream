// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: user.proto

#include "user.pb.h"
#include "user.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace user {

static const char* UserService_method_names[] = {
  "/user.UserService/QueryUser",
  "/user.UserService/SendSMS",
  "/user.UserService/MobileLogin",
  "/user.UserService/ValidateToken",
  "/user.UserService/CreateLoginToken",
};

std::unique_ptr< UserService::Stub> UserService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< UserService::Stub> stub(new UserService::Stub(channel, options));
  return stub;
}

UserService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_QueryUser_(UserService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendSMS_(UserService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MobileLogin_(UserService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ValidateToken_(UserService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateLoginToken_(UserService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status UserService::Stub::QueryUser(::grpc::ClientContext* context, const ::user::QueryUserRequest& request, ::user::QueryUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::user::QueryUserRequest, ::user::QueryUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_QueryUser_, context, request, response);
}

void UserService::Stub::async::QueryUser(::grpc::ClientContext* context, const ::user::QueryUserRequest* request, ::user::QueryUserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::user::QueryUserRequest, ::user::QueryUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryUser_, context, request, response, std::move(f));
}

void UserService::Stub::async::QueryUser(::grpc::ClientContext* context, const ::user::QueryUserRequest* request, ::user::QueryUserResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::user::QueryUserResponse>* UserService::Stub::PrepareAsyncQueryUserRaw(::grpc::ClientContext* context, const ::user::QueryUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::user::QueryUserResponse, ::user::QueryUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_QueryUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::user::QueryUserResponse>* UserService::Stub::AsyncQueryUserRaw(::grpc::ClientContext* context, const ::user::QueryUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQueryUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::SendSMS(::grpc::ClientContext* context, const ::user::SendSMSRequest& request, ::user::WebResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::user::SendSMSRequest, ::user::WebResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendSMS_, context, request, response);
}

void UserService::Stub::async::SendSMS(::grpc::ClientContext* context, const ::user::SendSMSRequest* request, ::user::WebResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::user::SendSMSRequest, ::user::WebResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendSMS_, context, request, response, std::move(f));
}

void UserService::Stub::async::SendSMS(::grpc::ClientContext* context, const ::user::SendSMSRequest* request, ::user::WebResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendSMS_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::user::WebResponse>* UserService::Stub::PrepareAsyncSendSMSRaw(::grpc::ClientContext* context, const ::user::SendSMSRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::user::WebResponse, ::user::SendSMSRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendSMS_, context, request);
}

::grpc::ClientAsyncResponseReader< ::user::WebResponse>* UserService::Stub::AsyncSendSMSRaw(::grpc::ClientContext* context, const ::user::SendSMSRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendSMSRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::MobileLogin(::grpc::ClientContext* context, const ::user::MobileLoginRequest& request, ::user::MobileLoginResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::user::MobileLoginRequest, ::user::MobileLoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MobileLogin_, context, request, response);
}

void UserService::Stub::async::MobileLogin(::grpc::ClientContext* context, const ::user::MobileLoginRequest* request, ::user::MobileLoginResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::user::MobileLoginRequest, ::user::MobileLoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MobileLogin_, context, request, response, std::move(f));
}

void UserService::Stub::async::MobileLogin(::grpc::ClientContext* context, const ::user::MobileLoginRequest* request, ::user::MobileLoginResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MobileLogin_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::user::MobileLoginResponse>* UserService::Stub::PrepareAsyncMobileLoginRaw(::grpc::ClientContext* context, const ::user::MobileLoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::user::MobileLoginResponse, ::user::MobileLoginRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MobileLogin_, context, request);
}

::grpc::ClientAsyncResponseReader< ::user::MobileLoginResponse>* UserService::Stub::AsyncMobileLoginRaw(::grpc::ClientContext* context, const ::user::MobileLoginRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMobileLoginRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::ValidateToken(::grpc::ClientContext* context, const ::user::ValidateTokenRequest& request, ::user::ValidateTokenResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::user::ValidateTokenRequest, ::user::ValidateTokenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ValidateToken_, context, request, response);
}

void UserService::Stub::async::ValidateToken(::grpc::ClientContext* context, const ::user::ValidateTokenRequest* request, ::user::ValidateTokenResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::user::ValidateTokenRequest, ::user::ValidateTokenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValidateToken_, context, request, response, std::move(f));
}

void UserService::Stub::async::ValidateToken(::grpc::ClientContext* context, const ::user::ValidateTokenRequest* request, ::user::ValidateTokenResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValidateToken_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::user::ValidateTokenResponse>* UserService::Stub::PrepareAsyncValidateTokenRaw(::grpc::ClientContext* context, const ::user::ValidateTokenRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::user::ValidateTokenResponse, ::user::ValidateTokenRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ValidateToken_, context, request);
}

::grpc::ClientAsyncResponseReader< ::user::ValidateTokenResponse>* UserService::Stub::AsyncValidateTokenRaw(::grpc::ClientContext* context, const ::user::ValidateTokenRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncValidateTokenRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::CreateLoginToken(::grpc::ClientContext* context, const ::user::CreateLoginTokenRequest& request, ::user::CreateLoginTokenResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::user::CreateLoginTokenRequest, ::user::CreateLoginTokenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateLoginToken_, context, request, response);
}

void UserService::Stub::async::CreateLoginToken(::grpc::ClientContext* context, const ::user::CreateLoginTokenRequest* request, ::user::CreateLoginTokenResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::user::CreateLoginTokenRequest, ::user::CreateLoginTokenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateLoginToken_, context, request, response, std::move(f));
}

void UserService::Stub::async::CreateLoginToken(::grpc::ClientContext* context, const ::user::CreateLoginTokenRequest* request, ::user::CreateLoginTokenResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateLoginToken_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::user::CreateLoginTokenResponse>* UserService::Stub::PrepareAsyncCreateLoginTokenRaw(::grpc::ClientContext* context, const ::user::CreateLoginTokenRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::user::CreateLoginTokenResponse, ::user::CreateLoginTokenRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateLoginToken_, context, request);
}

::grpc::ClientAsyncResponseReader< ::user::CreateLoginTokenResponse>* UserService::Stub::AsyncCreateLoginTokenRaw(::grpc::ClientContext* context, const ::user::CreateLoginTokenRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateLoginTokenRaw(context, request, cq);
  result->StartCall();
  return result;
}

UserService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::user::QueryUserRequest, ::user::QueryUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::user::QueryUserRequest* req,
             ::user::QueryUserResponse* resp) {
               return service->QueryUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::user::SendSMSRequest, ::user::WebResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::user::SendSMSRequest* req,
             ::user::WebResponse* resp) {
               return service->SendSMS(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::user::MobileLoginRequest, ::user::MobileLoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::user::MobileLoginRequest* req,
             ::user::MobileLoginResponse* resp) {
               return service->MobileLogin(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::user::ValidateTokenRequest, ::user::ValidateTokenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::user::ValidateTokenRequest* req,
             ::user::ValidateTokenResponse* resp) {
               return service->ValidateToken(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::user::CreateLoginTokenRequest, ::user::CreateLoginTokenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::user::CreateLoginTokenRequest* req,
             ::user::CreateLoginTokenResponse* resp) {
               return service->CreateLoginToken(ctx, req, resp);
             }, this)));
}

UserService::Service::~Service() {
}

::grpc::Status UserService::Service::QueryUser(::grpc::ServerContext* context, const ::user::QueryUserRequest* request, ::user::QueryUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::SendSMS(::grpc::ServerContext* context, const ::user::SendSMSRequest* request, ::user::WebResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::MobileLogin(::grpc::ServerContext* context, const ::user::MobileLoginRequest* request, ::user::MobileLoginResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::ValidateToken(::grpc::ServerContext* context, const ::user::ValidateTokenRequest* request, ::user::ValidateTokenResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::CreateLoginToken(::grpc::ServerContext* context, const ::user::CreateLoginTokenRequest* request, ::user::CreateLoginTokenResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace user

