// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_user_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_user_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_user_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_user_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_user_2eproto;
namespace user {
class CreateLoginTokenRequest;
struct CreateLoginTokenRequestDefaultTypeInternal;
extern CreateLoginTokenRequestDefaultTypeInternal _CreateLoginTokenRequest_default_instance_;
class CreateLoginTokenResponse;
struct CreateLoginTokenResponseDefaultTypeInternal;
extern CreateLoginTokenResponseDefaultTypeInternal _CreateLoginTokenResponse_default_instance_;
class MobileLoginRequest;
struct MobileLoginRequestDefaultTypeInternal;
extern MobileLoginRequestDefaultTypeInternal _MobileLoginRequest_default_instance_;
class MobileLoginResponse;
struct MobileLoginResponseDefaultTypeInternal;
extern MobileLoginResponseDefaultTypeInternal _MobileLoginResponse_default_instance_;
class QueryUserRequest;
struct QueryUserRequestDefaultTypeInternal;
extern QueryUserRequestDefaultTypeInternal _QueryUserRequest_default_instance_;
class QueryUserResponse;
struct QueryUserResponseDefaultTypeInternal;
extern QueryUserResponseDefaultTypeInternal _QueryUserResponse_default_instance_;
class SendSMSRequest;
struct SendSMSRequestDefaultTypeInternal;
extern SendSMSRequestDefaultTypeInternal _SendSMSRequest_default_instance_;
class UserDTO;
struct UserDTODefaultTypeInternal;
extern UserDTODefaultTypeInternal _UserDTO_default_instance_;
class ValidateTokenRequest;
struct ValidateTokenRequestDefaultTypeInternal;
extern ValidateTokenRequestDefaultTypeInternal _ValidateTokenRequest_default_instance_;
class ValidateTokenResponse;
struct ValidateTokenResponseDefaultTypeInternal;
extern ValidateTokenResponseDefaultTypeInternal _ValidateTokenResponse_default_instance_;
class WebResponse;
struct WebResponseDefaultTypeInternal;
extern WebResponseDefaultTypeInternal _WebResponse_default_instance_;
}  // namespace user
PROTOBUF_NAMESPACE_OPEN
template<> ::user::CreateLoginTokenRequest* Arena::CreateMaybeMessage<::user::CreateLoginTokenRequest>(Arena*);
template<> ::user::CreateLoginTokenResponse* Arena::CreateMaybeMessage<::user::CreateLoginTokenResponse>(Arena*);
template<> ::user::MobileLoginRequest* Arena::CreateMaybeMessage<::user::MobileLoginRequest>(Arena*);
template<> ::user::MobileLoginResponse* Arena::CreateMaybeMessage<::user::MobileLoginResponse>(Arena*);
template<> ::user::QueryUserRequest* Arena::CreateMaybeMessage<::user::QueryUserRequest>(Arena*);
template<> ::user::QueryUserResponse* Arena::CreateMaybeMessage<::user::QueryUserResponse>(Arena*);
template<> ::user::SendSMSRequest* Arena::CreateMaybeMessage<::user::SendSMSRequest>(Arena*);
template<> ::user::UserDTO* Arena::CreateMaybeMessage<::user::UserDTO>(Arena*);
template<> ::user::ValidateTokenRequest* Arena::CreateMaybeMessage<::user::ValidateTokenRequest>(Arena*);
template<> ::user::ValidateTokenResponse* Arena::CreateMaybeMessage<::user::ValidateTokenResponse>(Arena*);
template<> ::user::WebResponse* Arena::CreateMaybeMessage<::user::WebResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace user {

// ===================================================================

class QueryUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.QueryUserRequest) */ {
 public:
  inline QueryUserRequest() : QueryUserRequest(nullptr) {}
  ~QueryUserRequest() override;
  explicit constexpr QueryUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryUserRequest(const QueryUserRequest& from);
  QueryUserRequest(QueryUserRequest&& from) noexcept
    : QueryUserRequest() {
    *this = ::std::move(from);
  }

  inline QueryUserRequest& operator=(const QueryUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryUserRequest& operator=(QueryUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryUserRequest* internal_default_instance() {
    return reinterpret_cast<const QueryUserRequest*>(
               &_QueryUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QueryUserRequest& a, QueryUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryUserRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryUserRequest* New() const final {
    return new QueryUserRequest();
  }

  QueryUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const QueryUserRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryUserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.QueryUserRequest";
  }
  protected:
  explicit QueryUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // int64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:user.QueryUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class QueryUserResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.QueryUserResponse) */ {
 public:
  inline QueryUserResponse() : QueryUserResponse(nullptr) {}
  ~QueryUserResponse() override;
  explicit constexpr QueryUserResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryUserResponse(const QueryUserResponse& from);
  QueryUserResponse(QueryUserResponse&& from) noexcept
    : QueryUserResponse() {
    *this = ::std::move(from);
  }

  inline QueryUserResponse& operator=(const QueryUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryUserResponse& operator=(QueryUserResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryUserResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryUserResponse* internal_default_instance() {
    return reinterpret_cast<const QueryUserResponse*>(
               &_QueryUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QueryUserResponse& a, QueryUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryUserResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryUserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryUserResponse* New() const final {
    return new QueryUserResponse();
  }

  QueryUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryUserResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryUserResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const QueryUserResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryUserResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.QueryUserResponse";
  }
  protected:
  explicit QueryUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // .user.UserDTO user = 1;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::user::UserDTO& user() const;
  PROTOBUF_MUST_USE_RESULT ::user::UserDTO* release_user();
  ::user::UserDTO* mutable_user();
  void set_allocated_user(::user::UserDTO* user);
  private:
  const ::user::UserDTO& _internal_user() const;
  ::user::UserDTO* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::user::UserDTO* user);
  ::user::UserDTO* unsafe_arena_release_user();

  // @@protoc_insertion_point(class_scope:user.QueryUserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::user::UserDTO* user_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class SendSMSRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.SendSMSRequest) */ {
 public:
  inline SendSMSRequest() : SendSMSRequest(nullptr) {}
  ~SendSMSRequest() override;
  explicit constexpr SendSMSRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendSMSRequest(const SendSMSRequest& from);
  SendSMSRequest(SendSMSRequest&& from) noexcept
    : SendSMSRequest() {
    *this = ::std::move(from);
  }

  inline SendSMSRequest& operator=(const SendSMSRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendSMSRequest& operator=(SendSMSRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendSMSRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendSMSRequest* internal_default_instance() {
    return reinterpret_cast<const SendSMSRequest*>(
               &_SendSMSRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SendSMSRequest& a, SendSMSRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendSMSRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendSMSRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendSMSRequest* New() const final {
    return new SendSMSRequest();
  }

  SendSMSRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendSMSRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendSMSRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SendSMSRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendSMSRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.SendSMSRequest";
  }
  protected:
  explicit SendSMSRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMobileFieldNumber = 1,
  };
  // string mobile = 1;
  void clear_mobile();
  const std::string& mobile() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mobile(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mobile();
  PROTOBUF_MUST_USE_RESULT std::string* release_mobile();
  void set_allocated_mobile(std::string* mobile);
  private:
  const std::string& _internal_mobile() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mobile(const std::string& value);
  std::string* _internal_mutable_mobile();
  public:

  // @@protoc_insertion_point(class_scope:user.SendSMSRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mobile_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class WebResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.WebResponse) */ {
 public:
  inline WebResponse() : WebResponse(nullptr) {}
  ~WebResponse() override;
  explicit constexpr WebResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WebResponse(const WebResponse& from);
  WebResponse(WebResponse&& from) noexcept
    : WebResponse() {
    *this = ::std::move(from);
  }

  inline WebResponse& operator=(const WebResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WebResponse& operator=(WebResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WebResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WebResponse* internal_default_instance() {
    return reinterpret_cast<const WebResponse*>(
               &_WebResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(WebResponse& a, WebResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WebResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WebResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WebResponse* New() const final {
    return new WebResponse();
  }

  WebResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WebResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WebResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WebResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WebResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.WebResponse";
  }
  protected:
  explicit WebResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:user.WebResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class MobileLoginRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.MobileLoginRequest) */ {
 public:
  inline MobileLoginRequest() : MobileLoginRequest(nullptr) {}
  ~MobileLoginRequest() override;
  explicit constexpr MobileLoginRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MobileLoginRequest(const MobileLoginRequest& from);
  MobileLoginRequest(MobileLoginRequest&& from) noexcept
    : MobileLoginRequest() {
    *this = ::std::move(from);
  }

  inline MobileLoginRequest& operator=(const MobileLoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MobileLoginRequest& operator=(MobileLoginRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MobileLoginRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MobileLoginRequest* internal_default_instance() {
    return reinterpret_cast<const MobileLoginRequest*>(
               &_MobileLoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MobileLoginRequest& a, MobileLoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MobileLoginRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MobileLoginRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MobileLoginRequest* New() const final {
    return new MobileLoginRequest();
  }

  MobileLoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MobileLoginRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MobileLoginRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MobileLoginRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MobileLoginRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.MobileLoginRequest";
  }
  protected:
  explicit MobileLoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMobileFieldNumber = 1,
    kCodeFieldNumber = 2,
  };
  // string mobile = 1;
  void clear_mobile();
  const std::string& mobile() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mobile(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mobile();
  PROTOBUF_MUST_USE_RESULT std::string* release_mobile();
  void set_allocated_mobile(std::string* mobile);
  private:
  const std::string& _internal_mobile() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mobile(const std::string& value);
  std::string* _internal_mutable_mobile();
  public:

  // int32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:user.MobileLoginRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mobile_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class MobileLoginResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.MobileLoginResponse) */ {
 public:
  inline MobileLoginResponse() : MobileLoginResponse(nullptr) {}
  ~MobileLoginResponse() override;
  explicit constexpr MobileLoginResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MobileLoginResponse(const MobileLoginResponse& from);
  MobileLoginResponse(MobileLoginResponse&& from) noexcept
    : MobileLoginResponse() {
    *this = ::std::move(from);
  }

  inline MobileLoginResponse& operator=(const MobileLoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MobileLoginResponse& operator=(MobileLoginResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MobileLoginResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MobileLoginResponse* internal_default_instance() {
    return reinterpret_cast<const MobileLoginResponse*>(
               &_MobileLoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MobileLoginResponse& a, MobileLoginResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MobileLoginResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MobileLoginResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MobileLoginResponse* New() const final {
    return new MobileLoginResponse();
  }

  MobileLoginResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MobileLoginResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MobileLoginResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MobileLoginResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MobileLoginResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.MobileLoginResponse";
  }
  protected:
  explicit MobileLoginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 2,
    kMessageFieldNumber = 3,
    kLoginSuccessFieldNumber = 1,
  };
  // string token = 2;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_MUST_USE_RESULT std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string message = 3;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool login_success = 1;
  void clear_login_success();
  bool login_success() const;
  void set_login_success(bool value);
  private:
  bool _internal_login_success() const;
  void _internal_set_login_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:user.MobileLoginResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  bool login_success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class ValidateTokenRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.ValidateTokenRequest) */ {
 public:
  inline ValidateTokenRequest() : ValidateTokenRequest(nullptr) {}
  ~ValidateTokenRequest() override;
  explicit constexpr ValidateTokenRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ValidateTokenRequest(const ValidateTokenRequest& from);
  ValidateTokenRequest(ValidateTokenRequest&& from) noexcept
    : ValidateTokenRequest() {
    *this = ::std::move(from);
  }

  inline ValidateTokenRequest& operator=(const ValidateTokenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidateTokenRequest& operator=(ValidateTokenRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValidateTokenRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ValidateTokenRequest* internal_default_instance() {
    return reinterpret_cast<const ValidateTokenRequest*>(
               &_ValidateTokenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ValidateTokenRequest& a, ValidateTokenRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidateTokenRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidateTokenRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidateTokenRequest* New() const final {
    return new ValidateTokenRequest();
  }

  ValidateTokenRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidateTokenRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ValidateTokenRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ValidateTokenRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidateTokenRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.ValidateTokenRequest";
  }
  protected:
  explicit ValidateTokenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_MUST_USE_RESULT std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:user.ValidateTokenRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class ValidateTokenResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.ValidateTokenResponse) */ {
 public:
  inline ValidateTokenResponse() : ValidateTokenResponse(nullptr) {}
  ~ValidateTokenResponse() override;
  explicit constexpr ValidateTokenResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ValidateTokenResponse(const ValidateTokenResponse& from);
  ValidateTokenResponse(ValidateTokenResponse&& from) noexcept
    : ValidateTokenResponse() {
    *this = ::std::move(from);
  }

  inline ValidateTokenResponse& operator=(const ValidateTokenResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidateTokenResponse& operator=(ValidateTokenResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValidateTokenResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ValidateTokenResponse* internal_default_instance() {
    return reinterpret_cast<const ValidateTokenResponse*>(
               &_ValidateTokenResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ValidateTokenResponse& a, ValidateTokenResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidateTokenResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidateTokenResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidateTokenResponse* New() const final {
    return new ValidateTokenResponse();
  }

  ValidateTokenResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidateTokenResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ValidateTokenResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ValidateTokenResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidateTokenResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.ValidateTokenResponse";
  }
  protected:
  explicit ValidateTokenResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 2,
    kMessageFieldNumber = 3,
    kIsValidFieldNumber = 1,
  };
  // string user_id = 2;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string message = 3;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool is_valid = 1;
  void clear_is_valid();
  bool is_valid() const;
  void set_is_valid(bool value);
  private:
  bool _internal_is_valid() const;
  void _internal_set_is_valid(bool value);
  public:

  // @@protoc_insertion_point(class_scope:user.ValidateTokenResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  bool is_valid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class CreateLoginTokenRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.CreateLoginTokenRequest) */ {
 public:
  inline CreateLoginTokenRequest() : CreateLoginTokenRequest(nullptr) {}
  ~CreateLoginTokenRequest() override;
  explicit constexpr CreateLoginTokenRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateLoginTokenRequest(const CreateLoginTokenRequest& from);
  CreateLoginTokenRequest(CreateLoginTokenRequest&& from) noexcept
    : CreateLoginTokenRequest() {
    *this = ::std::move(from);
  }

  inline CreateLoginTokenRequest& operator=(const CreateLoginTokenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateLoginTokenRequest& operator=(CreateLoginTokenRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateLoginTokenRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateLoginTokenRequest* internal_default_instance() {
    return reinterpret_cast<const CreateLoginTokenRequest*>(
               &_CreateLoginTokenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CreateLoginTokenRequest& a, CreateLoginTokenRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateLoginTokenRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateLoginTokenRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateLoginTokenRequest* New() const final {
    return new CreateLoginTokenRequest();
  }

  CreateLoginTokenRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateLoginTokenRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateLoginTokenRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateLoginTokenRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateLoginTokenRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.CreateLoginTokenRequest";
  }
  protected:
  explicit CreateLoginTokenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // int64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:user.CreateLoginTokenRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class CreateLoginTokenResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.CreateLoginTokenResponse) */ {
 public:
  inline CreateLoginTokenResponse() : CreateLoginTokenResponse(nullptr) {}
  ~CreateLoginTokenResponse() override;
  explicit constexpr CreateLoginTokenResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateLoginTokenResponse(const CreateLoginTokenResponse& from);
  CreateLoginTokenResponse(CreateLoginTokenResponse&& from) noexcept
    : CreateLoginTokenResponse() {
    *this = ::std::move(from);
  }

  inline CreateLoginTokenResponse& operator=(const CreateLoginTokenResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateLoginTokenResponse& operator=(CreateLoginTokenResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateLoginTokenResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateLoginTokenResponse* internal_default_instance() {
    return reinterpret_cast<const CreateLoginTokenResponse*>(
               &_CreateLoginTokenResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CreateLoginTokenResponse& a, CreateLoginTokenResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateLoginTokenResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateLoginTokenResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateLoginTokenResponse* New() const final {
    return new CreateLoginTokenResponse();
  }

  CreateLoginTokenResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateLoginTokenResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateLoginTokenResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateLoginTokenResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateLoginTokenResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.CreateLoginTokenResponse";
  }
  protected:
  explicit CreateLoginTokenResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_MUST_USE_RESULT std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:user.CreateLoginTokenResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class UserDTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.UserDTO) */ {
 public:
  inline UserDTO() : UserDTO(nullptr) {}
  ~UserDTO() override;
  explicit constexpr UserDTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserDTO(const UserDTO& from);
  UserDTO(UserDTO&& from) noexcept
    : UserDTO() {
    *this = ::std::move(from);
  }

  inline UserDTO& operator=(const UserDTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserDTO& operator=(UserDTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserDTO& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserDTO* internal_default_instance() {
    return reinterpret_cast<const UserDTO*>(
               &_UserDTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(UserDTO& a, UserDTO& b) {
    a.Swap(&b);
  }
  inline void Swap(UserDTO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserDTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserDTO* New() const final {
    return new UserDTO();
  }

  UserDTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserDTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserDTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UserDTO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserDTO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.UserDTO";
  }
  protected:
  explicit UserDTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNickNameFieldNumber = 2,
    kTrueNameFieldNumber = 3,
    kAvatarFieldNumber = 4,
    kCreateTimeFieldNumber = 6,
    kUpdateTimeFieldNumber = 7,
    kUserIdFieldNumber = 1,
    kSexFieldNumber = 5,
  };
  // string nick_name = 2;
  void clear_nick_name();
  const std::string& nick_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nick_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nick_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_nick_name();
  void set_allocated_nick_name(std::string* nick_name);
  private:
  const std::string& _internal_nick_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nick_name(const std::string& value);
  std::string* _internal_mutable_nick_name();
  public:

  // string true_name = 3;
  void clear_true_name();
  const std::string& true_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_true_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_true_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_true_name();
  void set_allocated_true_name(std::string* true_name);
  private:
  const std::string& _internal_true_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_true_name(const std::string& value);
  std::string* _internal_mutable_true_name();
  public:

  // string avatar = 4;
  void clear_avatar();
  const std::string& avatar() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_avatar(ArgT0&& arg0, ArgT... args);
  std::string* mutable_avatar();
  PROTOBUF_MUST_USE_RESULT std::string* release_avatar();
  void set_allocated_avatar(std::string* avatar);
  private:
  const std::string& _internal_avatar() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avatar(const std::string& value);
  std::string* _internal_mutable_avatar();
  public:

  // string create_time = 6;
  void clear_create_time();
  const std::string& create_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_create_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_create_time();
  PROTOBUF_MUST_USE_RESULT std::string* release_create_time();
  void set_allocated_create_time(std::string* create_time);
  private:
  const std::string& _internal_create_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_create_time(const std::string& value);
  std::string* _internal_mutable_create_time();
  public:

  // string update_time = 7;
  void clear_update_time();
  const std::string& update_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_update_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_update_time();
  PROTOBUF_MUST_USE_RESULT std::string* release_update_time();
  void set_allocated_update_time(std::string* update_time);
  private:
  const std::string& _internal_update_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_update_time(const std::string& value);
  std::string* _internal_mutable_update_time();
  public:

  // int64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 sex = 5;
  void clear_sex();
  ::PROTOBUF_NAMESPACE_ID::int32 sex() const;
  void set_sex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sex() const;
  void _internal_set_sex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:user.UserDTO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr true_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr create_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr update_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 sex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// QueryUserRequest

// int64 user_id = 1;
inline void QueryUserRequest::clear_user_id() {
  user_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QueryUserRequest::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QueryUserRequest::user_id() const {
  // @@protoc_insertion_point(field_get:user.QueryUserRequest.user_id)
  return _internal_user_id();
}
inline void QueryUserRequest::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void QueryUserRequest::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:user.QueryUserRequest.user_id)
}

// -------------------------------------------------------------------

// QueryUserResponse

// .user.UserDTO user = 1;
inline bool QueryUserResponse::_internal_has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline bool QueryUserResponse::has_user() const {
  return _internal_has_user();
}
inline void QueryUserResponse::clear_user() {
  if (GetArenaForAllocation() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
inline const ::user::UserDTO& QueryUserResponse::_internal_user() const {
  const ::user::UserDTO* p = user_;
  return p != nullptr ? *p : reinterpret_cast<const ::user::UserDTO&>(
      ::user::_UserDTO_default_instance_);
}
inline const ::user::UserDTO& QueryUserResponse::user() const {
  // @@protoc_insertion_point(field_get:user.QueryUserResponse.user)
  return _internal_user();
}
inline void QueryUserResponse::unsafe_arena_set_allocated_user(
    ::user::UserDTO* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:user.QueryUserResponse.user)
}
inline ::user::UserDTO* QueryUserResponse::release_user() {
  
  ::user::UserDTO* temp = user_;
  user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::user::UserDTO* QueryUserResponse::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:user.QueryUserResponse.user)
  
  ::user::UserDTO* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::user::UserDTO* QueryUserResponse::_internal_mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::user::UserDTO>(GetArenaForAllocation());
    user_ = p;
  }
  return user_;
}
inline ::user::UserDTO* QueryUserResponse::mutable_user() {
  ::user::UserDTO* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:user.QueryUserResponse.user)
  return _msg;
}
inline void QueryUserResponse::set_allocated_user(::user::UserDTO* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::user::UserDTO>::GetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:user.QueryUserResponse.user)
}

// -------------------------------------------------------------------

// SendSMSRequest

// string mobile = 1;
inline void SendSMSRequest::clear_mobile() {
  mobile_.ClearToEmpty();
}
inline const std::string& SendSMSRequest::mobile() const {
  // @@protoc_insertion_point(field_get:user.SendSMSRequest.mobile)
  return _internal_mobile();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendSMSRequest::set_mobile(ArgT0&& arg0, ArgT... args) {
 
 mobile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:user.SendSMSRequest.mobile)
}
inline std::string* SendSMSRequest::mutable_mobile() {
  std::string* _s = _internal_mutable_mobile();
  // @@protoc_insertion_point(field_mutable:user.SendSMSRequest.mobile)
  return _s;
}
inline const std::string& SendSMSRequest::_internal_mobile() const {
  return mobile_.Get();
}
inline void SendSMSRequest::_internal_set_mobile(const std::string& value) {
  
  mobile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SendSMSRequest::_internal_mutable_mobile() {
  
  return mobile_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SendSMSRequest::release_mobile() {
  // @@protoc_insertion_point(field_release:user.SendSMSRequest.mobile)
  return mobile_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SendSMSRequest::set_allocated_mobile(std::string* mobile) {
  if (mobile != nullptr) {
    
  } else {
    
  }
  mobile_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mobile,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:user.SendSMSRequest.mobile)
}

// -------------------------------------------------------------------

// WebResponse

// int32 code = 1;
inline void WebResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WebResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WebResponse::code() const {
  // @@protoc_insertion_point(field_get:user.WebResponse.code)
  return _internal_code();
}
inline void WebResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void WebResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:user.WebResponse.code)
}

// string message = 2;
inline void WebResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& WebResponse::message() const {
  // @@protoc_insertion_point(field_get:user.WebResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WebResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:user.WebResponse.message)
}
inline std::string* WebResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:user.WebResponse.message)
  return _s;
}
inline const std::string& WebResponse::_internal_message() const {
  return message_.Get();
}
inline void WebResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WebResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WebResponse::release_message() {
  // @@protoc_insertion_point(field_release:user.WebResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WebResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:user.WebResponse.message)
}

// -------------------------------------------------------------------

// MobileLoginRequest

// string mobile = 1;
inline void MobileLoginRequest::clear_mobile() {
  mobile_.ClearToEmpty();
}
inline const std::string& MobileLoginRequest::mobile() const {
  // @@protoc_insertion_point(field_get:user.MobileLoginRequest.mobile)
  return _internal_mobile();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MobileLoginRequest::set_mobile(ArgT0&& arg0, ArgT... args) {
 
 mobile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:user.MobileLoginRequest.mobile)
}
inline std::string* MobileLoginRequest::mutable_mobile() {
  std::string* _s = _internal_mutable_mobile();
  // @@protoc_insertion_point(field_mutable:user.MobileLoginRequest.mobile)
  return _s;
}
inline const std::string& MobileLoginRequest::_internal_mobile() const {
  return mobile_.Get();
}
inline void MobileLoginRequest::_internal_set_mobile(const std::string& value) {
  
  mobile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MobileLoginRequest::_internal_mutable_mobile() {
  
  return mobile_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MobileLoginRequest::release_mobile() {
  // @@protoc_insertion_point(field_release:user.MobileLoginRequest.mobile)
  return mobile_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MobileLoginRequest::set_allocated_mobile(std::string* mobile) {
  if (mobile != nullptr) {
    
  } else {
    
  }
  mobile_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mobile,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:user.MobileLoginRequest.mobile)
}

// int32 code = 2;
inline void MobileLoginRequest::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MobileLoginRequest::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MobileLoginRequest::code() const {
  // @@protoc_insertion_point(field_get:user.MobileLoginRequest.code)
  return _internal_code();
}
inline void MobileLoginRequest::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void MobileLoginRequest::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:user.MobileLoginRequest.code)
}

// -------------------------------------------------------------------

// MobileLoginResponse

// bool login_success = 1;
inline void MobileLoginResponse::clear_login_success() {
  login_success_ = false;
}
inline bool MobileLoginResponse::_internal_login_success() const {
  return login_success_;
}
inline bool MobileLoginResponse::login_success() const {
  // @@protoc_insertion_point(field_get:user.MobileLoginResponse.login_success)
  return _internal_login_success();
}
inline void MobileLoginResponse::_internal_set_login_success(bool value) {
  
  login_success_ = value;
}
inline void MobileLoginResponse::set_login_success(bool value) {
  _internal_set_login_success(value);
  // @@protoc_insertion_point(field_set:user.MobileLoginResponse.login_success)
}

// string token = 2;
inline void MobileLoginResponse::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& MobileLoginResponse::token() const {
  // @@protoc_insertion_point(field_get:user.MobileLoginResponse.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MobileLoginResponse::set_token(ArgT0&& arg0, ArgT... args) {
 
 token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:user.MobileLoginResponse.token)
}
inline std::string* MobileLoginResponse::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:user.MobileLoginResponse.token)
  return _s;
}
inline const std::string& MobileLoginResponse::_internal_token() const {
  return token_.Get();
}
inline void MobileLoginResponse::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MobileLoginResponse::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MobileLoginResponse::release_token() {
  // @@protoc_insertion_point(field_release:user.MobileLoginResponse.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MobileLoginResponse::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:user.MobileLoginResponse.token)
}

// string message = 3;
inline void MobileLoginResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& MobileLoginResponse::message() const {
  // @@protoc_insertion_point(field_get:user.MobileLoginResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MobileLoginResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:user.MobileLoginResponse.message)
}
inline std::string* MobileLoginResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:user.MobileLoginResponse.message)
  return _s;
}
inline const std::string& MobileLoginResponse::_internal_message() const {
  return message_.Get();
}
inline void MobileLoginResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MobileLoginResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MobileLoginResponse::release_message() {
  // @@protoc_insertion_point(field_release:user.MobileLoginResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MobileLoginResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:user.MobileLoginResponse.message)
}

// -------------------------------------------------------------------

// ValidateTokenRequest

// string token = 1;
inline void ValidateTokenRequest::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& ValidateTokenRequest::token() const {
  // @@protoc_insertion_point(field_get:user.ValidateTokenRequest.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ValidateTokenRequest::set_token(ArgT0&& arg0, ArgT... args) {
 
 token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:user.ValidateTokenRequest.token)
}
inline std::string* ValidateTokenRequest::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:user.ValidateTokenRequest.token)
  return _s;
}
inline const std::string& ValidateTokenRequest::_internal_token() const {
  return token_.Get();
}
inline void ValidateTokenRequest::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ValidateTokenRequest::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ValidateTokenRequest::release_token() {
  // @@protoc_insertion_point(field_release:user.ValidateTokenRequest.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ValidateTokenRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:user.ValidateTokenRequest.token)
}

// -------------------------------------------------------------------

// ValidateTokenResponse

// bool is_valid = 1;
inline void ValidateTokenResponse::clear_is_valid() {
  is_valid_ = false;
}
inline bool ValidateTokenResponse::_internal_is_valid() const {
  return is_valid_;
}
inline bool ValidateTokenResponse::is_valid() const {
  // @@protoc_insertion_point(field_get:user.ValidateTokenResponse.is_valid)
  return _internal_is_valid();
}
inline void ValidateTokenResponse::_internal_set_is_valid(bool value) {
  
  is_valid_ = value;
}
inline void ValidateTokenResponse::set_is_valid(bool value) {
  _internal_set_is_valid(value);
  // @@protoc_insertion_point(field_set:user.ValidateTokenResponse.is_valid)
}

// string user_id = 2;
inline void ValidateTokenResponse::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& ValidateTokenResponse::user_id() const {
  // @@protoc_insertion_point(field_get:user.ValidateTokenResponse.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ValidateTokenResponse::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:user.ValidateTokenResponse.user_id)
}
inline std::string* ValidateTokenResponse::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:user.ValidateTokenResponse.user_id)
  return _s;
}
inline const std::string& ValidateTokenResponse::_internal_user_id() const {
  return user_id_.Get();
}
inline void ValidateTokenResponse::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ValidateTokenResponse::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ValidateTokenResponse::release_user_id() {
  // @@protoc_insertion_point(field_release:user.ValidateTokenResponse.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ValidateTokenResponse::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:user.ValidateTokenResponse.user_id)
}

// string message = 3;
inline void ValidateTokenResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& ValidateTokenResponse::message() const {
  // @@protoc_insertion_point(field_get:user.ValidateTokenResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ValidateTokenResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:user.ValidateTokenResponse.message)
}
inline std::string* ValidateTokenResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:user.ValidateTokenResponse.message)
  return _s;
}
inline const std::string& ValidateTokenResponse::_internal_message() const {
  return message_.Get();
}
inline void ValidateTokenResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ValidateTokenResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ValidateTokenResponse::release_message() {
  // @@protoc_insertion_point(field_release:user.ValidateTokenResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ValidateTokenResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:user.ValidateTokenResponse.message)
}

// -------------------------------------------------------------------

// CreateLoginTokenRequest

// int64 user_id = 1;
inline void CreateLoginTokenRequest::clear_user_id() {
  user_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateLoginTokenRequest::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateLoginTokenRequest::user_id() const {
  // @@protoc_insertion_point(field_get:user.CreateLoginTokenRequest.user_id)
  return _internal_user_id();
}
inline void CreateLoginTokenRequest::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void CreateLoginTokenRequest::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:user.CreateLoginTokenRequest.user_id)
}

// -------------------------------------------------------------------

// CreateLoginTokenResponse

// string token = 1;
inline void CreateLoginTokenResponse::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& CreateLoginTokenResponse::token() const {
  // @@protoc_insertion_point(field_get:user.CreateLoginTokenResponse.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateLoginTokenResponse::set_token(ArgT0&& arg0, ArgT... args) {
 
 token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:user.CreateLoginTokenResponse.token)
}
inline std::string* CreateLoginTokenResponse::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:user.CreateLoginTokenResponse.token)
  return _s;
}
inline const std::string& CreateLoginTokenResponse::_internal_token() const {
  return token_.Get();
}
inline void CreateLoginTokenResponse::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateLoginTokenResponse::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateLoginTokenResponse::release_token() {
  // @@protoc_insertion_point(field_release:user.CreateLoginTokenResponse.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateLoginTokenResponse::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:user.CreateLoginTokenResponse.token)
}

// -------------------------------------------------------------------

// UserDTO

// int64 user_id = 1;
inline void UserDTO::clear_user_id() {
  user_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserDTO::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserDTO::user_id() const {
  // @@protoc_insertion_point(field_get:user.UserDTO.user_id)
  return _internal_user_id();
}
inline void UserDTO::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void UserDTO::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:user.UserDTO.user_id)
}

// string nick_name = 2;
inline void UserDTO::clear_nick_name() {
  nick_name_.ClearToEmpty();
}
inline const std::string& UserDTO::nick_name() const {
  // @@protoc_insertion_point(field_get:user.UserDTO.nick_name)
  return _internal_nick_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserDTO::set_nick_name(ArgT0&& arg0, ArgT... args) {
 
 nick_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:user.UserDTO.nick_name)
}
inline std::string* UserDTO::mutable_nick_name() {
  std::string* _s = _internal_mutable_nick_name();
  // @@protoc_insertion_point(field_mutable:user.UserDTO.nick_name)
  return _s;
}
inline const std::string& UserDTO::_internal_nick_name() const {
  return nick_name_.Get();
}
inline void UserDTO::_internal_set_nick_name(const std::string& value) {
  
  nick_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserDTO::_internal_mutable_nick_name() {
  
  return nick_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserDTO::release_nick_name() {
  // @@protoc_insertion_point(field_release:user.UserDTO.nick_name)
  return nick_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserDTO::set_allocated_nick_name(std::string* nick_name) {
  if (nick_name != nullptr) {
    
  } else {
    
  }
  nick_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nick_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:user.UserDTO.nick_name)
}

// string true_name = 3;
inline void UserDTO::clear_true_name() {
  true_name_.ClearToEmpty();
}
inline const std::string& UserDTO::true_name() const {
  // @@protoc_insertion_point(field_get:user.UserDTO.true_name)
  return _internal_true_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserDTO::set_true_name(ArgT0&& arg0, ArgT... args) {
 
 true_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:user.UserDTO.true_name)
}
inline std::string* UserDTO::mutable_true_name() {
  std::string* _s = _internal_mutable_true_name();
  // @@protoc_insertion_point(field_mutable:user.UserDTO.true_name)
  return _s;
}
inline const std::string& UserDTO::_internal_true_name() const {
  return true_name_.Get();
}
inline void UserDTO::_internal_set_true_name(const std::string& value) {
  
  true_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserDTO::_internal_mutable_true_name() {
  
  return true_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserDTO::release_true_name() {
  // @@protoc_insertion_point(field_release:user.UserDTO.true_name)
  return true_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserDTO::set_allocated_true_name(std::string* true_name) {
  if (true_name != nullptr) {
    
  } else {
    
  }
  true_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), true_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:user.UserDTO.true_name)
}

// string avatar = 4;
inline void UserDTO::clear_avatar() {
  avatar_.ClearToEmpty();
}
inline const std::string& UserDTO::avatar() const {
  // @@protoc_insertion_point(field_get:user.UserDTO.avatar)
  return _internal_avatar();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserDTO::set_avatar(ArgT0&& arg0, ArgT... args) {
 
 avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:user.UserDTO.avatar)
}
inline std::string* UserDTO::mutable_avatar() {
  std::string* _s = _internal_mutable_avatar();
  // @@protoc_insertion_point(field_mutable:user.UserDTO.avatar)
  return _s;
}
inline const std::string& UserDTO::_internal_avatar() const {
  return avatar_.Get();
}
inline void UserDTO::_internal_set_avatar(const std::string& value) {
  
  avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserDTO::_internal_mutable_avatar() {
  
  return avatar_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserDTO::release_avatar() {
  // @@protoc_insertion_point(field_release:user.UserDTO.avatar)
  return avatar_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserDTO::set_allocated_avatar(std::string* avatar) {
  if (avatar != nullptr) {
    
  } else {
    
  }
  avatar_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:user.UserDTO.avatar)
}

// int32 sex = 5;
inline void UserDTO::clear_sex() {
  sex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserDTO::_internal_sex() const {
  return sex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserDTO::sex() const {
  // @@protoc_insertion_point(field_get:user.UserDTO.sex)
  return _internal_sex();
}
inline void UserDTO::_internal_set_sex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sex_ = value;
}
inline void UserDTO::set_sex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:user.UserDTO.sex)
}

// string create_time = 6;
inline void UserDTO::clear_create_time() {
  create_time_.ClearToEmpty();
}
inline const std::string& UserDTO::create_time() const {
  // @@protoc_insertion_point(field_get:user.UserDTO.create_time)
  return _internal_create_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserDTO::set_create_time(ArgT0&& arg0, ArgT... args) {
 
 create_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:user.UserDTO.create_time)
}
inline std::string* UserDTO::mutable_create_time() {
  std::string* _s = _internal_mutable_create_time();
  // @@protoc_insertion_point(field_mutable:user.UserDTO.create_time)
  return _s;
}
inline const std::string& UserDTO::_internal_create_time() const {
  return create_time_.Get();
}
inline void UserDTO::_internal_set_create_time(const std::string& value) {
  
  create_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserDTO::_internal_mutable_create_time() {
  
  return create_time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserDTO::release_create_time() {
  // @@protoc_insertion_point(field_release:user.UserDTO.create_time)
  return create_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserDTO::set_allocated_create_time(std::string* create_time) {
  if (create_time != nullptr) {
    
  } else {
    
  }
  create_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), create_time,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:user.UserDTO.create_time)
}

// string update_time = 7;
inline void UserDTO::clear_update_time() {
  update_time_.ClearToEmpty();
}
inline const std::string& UserDTO::update_time() const {
  // @@protoc_insertion_point(field_get:user.UserDTO.update_time)
  return _internal_update_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserDTO::set_update_time(ArgT0&& arg0, ArgT... args) {
 
 update_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:user.UserDTO.update_time)
}
inline std::string* UserDTO::mutable_update_time() {
  std::string* _s = _internal_mutable_update_time();
  // @@protoc_insertion_point(field_mutable:user.UserDTO.update_time)
  return _s;
}
inline const std::string& UserDTO::_internal_update_time() const {
  return update_time_.Get();
}
inline void UserDTO::_internal_set_update_time(const std::string& value) {
  
  update_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserDTO::_internal_mutable_update_time() {
  
  return update_time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserDTO::release_update_time() {
  // @@protoc_insertion_point(field_release:user.UserDTO.update_time)
  return update_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserDTO::set_allocated_update_time(std::string* update_time) {
  if (update_time != nullptr) {
    
  } else {
    
  }
  update_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), update_time,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:user.UserDTO.update_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace user

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_user_2eproto
